using System.Diagnostics;
using TestSort;

namespace UnitTestTimSort
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void InsertionSortIsWorkingRight()
        {
            int[] arr = new int[] { 23, 16, 7, 0, -5, 153, 1024, 67, 89, 2 };

            var timSort = new TimSort();

            InsertionSort.Instance.Sort(arr);

            int[] expected = new int[] { -5, 0, 2, 7, 16, 23, 67, 89, 153, 1024 };

            CollectionAssert.AreEqual(arr, expected);

        }

        [TestMethod]
        public void MergeIsWorkingRight()
        {
            int[] leftArr = new int[] { 1, 3, 5, 7, 9 };
            int[] rightArr = new int[] { 2, 4, 6, 8, 10 };
            int[] arr = new int[10];

            var timSort = new TimSort();

            int k = 0;

            timSort.MergeSort(arr, leftArr, leftArr.Length, rightArr, rightArr.Length, ref k);

            int[] expected = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

            CollectionAssert.AreEqual(arr, expected);

        }

        [TestMethod]
        public void TimSortIsWorkingRight()
        {
            int[] arr = new int[] { 25, 17, 42, 99, 83, 2, 55, 67, 73, 61, 10, 89, 34, 51, 22, 33, 7, 14, 97, 18, 46, 29, 38, 80, 93,
                                    72, 39, 9, 60, 78, 26, 44, 68, 52, 64, 88, 65, 94, 32, 6, 36, 58, 16, 85, 66, 90, 4, 19, 82, 37,
                                    11, 70, 27, 77, 41, 76, 96, 59, 91, 92, 50, 81, 43, 49, 53, 8, 47, 48, 20, 75, 13, 56, 74, 87, 31,
                                    5, 35, 84, 98, 57, 63, 30, 21, 54, 95, 69, 62, 86, 1, 23, 12, 40, 15, 45, 28, 79, 71, 3, 100, 24, 
                                    101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
                                    121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
                                    141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
                                    161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
                                    181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
                                    201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
                                    221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
                                    241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261 };
  
            TimSort.Instance.Sort(arr);

            int[] expected = new int[] {  1,
  2,  3,  4,  5,  6,  7,  8,  9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,
  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,
  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
  98,  99,  100,  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,  124,  125,  126,  127,  128,  129,
  130,  131,  132,  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,  155,  156,  157,  158,  159,  160,  161,
  162,  163,  164,  165,  166,  167,  168,  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  180,  181,  182,  183,  184,  185,  186,  187,  188,  189,  190,  191,  192,  193,
  194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  210,  211,  212,  213,  214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,
  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
  258,  259,  260,  261 };

            CollectionAssert.AreEqual(arr, expected);

        }

        [TestMethod]
        public void TimSortIsWorkingRightBigMass()
        {
            string inputFile = "array.txt";
            string expectedFile = "sortedArray.txt";

            string valuesString = File.ReadAllText(inputFile);

            // Разделяем строку на отдельные значения
            string[] valuesArray = valuesString.Split(' ');

            int N = 1000000;

            // Создаем массив int для хранения считанных значений
            int[] arr = new int[N];

            // Конвертируем каждое значение в int и сохраняем в массив
            for (int i = 0; i < N; i++)
            {
                arr[i] = int.Parse(valuesArray[i]);
            }

            var sw = new Stopwatch();
            sw.Start();
            TimSort.Instance.Sort(arr);
            sw.Stop();

            var time = sw.Elapsed;

            int[] expected = new int[N];
            valuesString = File.ReadAllText(expectedFile);

            // Разделяем строку на отдельные значения
            valuesArray = valuesString.Split(' ');

            // Конвертируем каждое значение в int и сохраняем в массив
            for (int i = 0; i < N; i++)
            {
                expected[i] = int.Parse(valuesArray[i]);
            }

            CollectionAssert.AreEqual(arr, expected);

        }

        [TestMethod]
        public void TimSortParallelIsWorkingRight()
        {
            int[] arr = new int[] { 25, 17, 42, 99, 83, 2, 55, 67, 73, 61, 10, 89, 34, 51, 22, 33, 7, 14, 97, 18, 46, 29, 38, 80, 93,
                                    72, 39, 9, 60, 78, 26, 44, 68, 52, 64, 88, 65, 94, 32, 6, 36, 58, 16, 85, 66, 90, 4, 19, 82, 37,
                                    11, 70, 27, 77, 41, 76, 96, 59, 91, 92, 50, 81, 43, 49, 53, 8, 47, 48, 20, 75, 13, 56, 74, 87, 31,
                                    5, 35, 84, 98, 57, 63, 30, 21, 54, 95, 69, 62, 86, 1, 23, 12, 40, 15, 45, 28, 79, 71, 3, 100, 24,
                                    101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
                                    121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
                                    141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
                                    161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
                                    181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
                                    201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
                                    221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
                                    241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261 };


            TimSort.Instance.SortParallel(arr);

            int[] expected = new int[] {  1,
  2,  3,  4,  5,  6,  7,  8,  9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,
  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,
  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
  98,  99,  100,  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,  124,  125,  126,  127,  128,  129,
  130,  131,  132,  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,  155,  156,  157,  158,  159,  160,  161,
  162,  163,  164,  165,  166,  167,  168,  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  180,  181,  182,  183,  184,  185,  186,  187,  188,  189,  190,  191,  192,  193,
  194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  210,  211,  212,  213,  214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,
  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
  258,  259,  260,  261 };

            CollectionAssert.AreEqual(arr, expected);
        }
    }
}